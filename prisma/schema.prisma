// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum UserRole {
  ADMIN
  USER
}

enum UserStatus {
  Active
  Inactive
  Pending
  Blocked
}

enum Gender {
  Male
  Female
  Other
  Unknown
}

model User {
  id            String    @id @default(cuid())
  name          String    @db.VarChar(255)
  email         String    @unique @db.VarChar(255)
  emailVerified DateTime? @map("email_verified")
  image         String?   @db.VarChar(255)
  bio           String?   @db.Text()

  firstName    String?   @map(name: "first_name") @db.VarChar(255)
  lastName     String?   @map(name: "last_name") @db.VarChar(255)
  gender       Gender?   @default(Unknown)
  dateOfBirth  DateTime? @map(name: "date_of_birth") @db.Date()
  phoneNumber  String?   @map(name: "phone_number") @db.VarChar(32)
  zipCode      String?   @map(name: "zip_code") @db.VarChar(32)
  address1     String?   @db.VarChar(255)
  address2     String?   @db.VarChar(255)
  languageCode String    @default("en") @map(name: "language_code") @db.VarChar(32)
  remarks      String?   @db.Text()

  role   UserRole   @default(USER) @map(name: "role")
  status UserStatus @default(Inactive)

  createdAt DateTime @default(now()) @map(name: "created_at")

  updatedAt     DateTime @default(now()) @map(name: "updated_at")
  updatedUserId String?  @map(name: "updated_user_id")
  updatedUser   User?    @relation("UpdatedUsers", fields: [updatedUserId], references: [id])
  updatedUsers  User[]   @relation("UpdatedUsers")

  approvedAt     DateTime? @map(name: "approved_at")
  approvedUserId String?   @map(name: "approved_user_id")
  approvedUser   User?     @relation("ApprovedUsers", fields: [approvedUserId], references: [id])
  approvedUsers  User[]    @relation("ApprovedUsers")

  deletedAt     DateTime? @map(name: "deleted_at")
  deletedUserId String?   @map(name: "deleted_user_id")
  deletedUser   User?     @relation("DeletedUsers", fields: [deletedUserId], references: [id])
  deletedUsers  User[]    @relation("DeletedUsers")

  accounts Account[]
  sessions Session[]
  roles    Role[]

  @@map("users")
}

model Role {
  id           String  @id @default(cuid())
  name         String  @db.VarChar(255)
  nameTrans    Json?   @map(name: "name_trans")
  remarks      String? @db.Text()
  remarksTrans Json?   @map(name: "remarks_trans")

  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")

  users       User[]
  permissions RolePermissions[]

  @@map("roles")
}

model Permission {
  id      String  @id
  name    String  @db.VarChar(255)
  remarks String? @db.Text()

  roles RolePermissions[]

  @@map("permissions")
}

model RolePermissions {
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       String     @map("role_id")
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String     @map("permission_id")
  read         Boolean    @default(false)
  write        Boolean    @default(false)

  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")

  @@id([roleId, permissionId])
  @@map("role_permissions")
}
